{"version":3,"sources":["components/ImageCard/ImageCard.js","components/Navbar/Navbar.js","components/Wrapper/Wrapper.js","components/Title/Title.js","components/Container/Container.js","components/Row/Row.js","components/Column/Column.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["ImageCard","props","react_default","a","createElement","className","value","id","onClick","handleClick","alt","name","src","image","Navbar","title","rightWrong","score","topScore","Wrapper","children","Title","Container","concat","fluid","Row","Column","size","split","map","join","Footer","Component","App","state","images","currentScore","clicked","_this","indexOf","handleIncrement","setState","handleReset","newScore","handleShuffle","shuffledImages","array","i","length","j","Math","floor","random","_ref","shuffleImages","_this2","this","components_Wrapper_Wrapper","components_Navbar_Navbar","components_Title_Title","components_Container_Container","components_Row_Row","components_Column_Column","components_ImageCard_ImageCard","key","components_Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"00CAeeA,SAZG,SAAAC,GAAK,OACrBC,EAAAC,EAAAC,cAAA,OACEC,UAAU,OACVC,MAAOL,EAAMM,GACbC,QAAS,kBAAMP,EAAMQ,YAAYR,EAAMM,MAEvCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKM,IAAKT,EAAMU,KAAMC,IAAKX,EAAMY,YCOxBC,SAdA,SAAAb,GAAK,OAClBC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAKH,EAAMc,OAEXb,EAAAC,EAAAC,cAAA,MAAIG,GAAG,MAAMN,EAAMe,YAEnBd,EAAAC,EAAAC,cAAA,MAAIG,GAAG,WAAP,kBAAiCN,EAAMgB,OAEvCf,EAAAC,EAAAC,cAAA,MAAIG,GAAG,WAAP,cAA6BN,EAAMiB,cCP1BC,SAFC,SAAAlB,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMmB,YCE1CC,SAFD,SAAApB,GAAK,OAAIC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASJ,EAAMmB,YCKrCE,EANG,SAAArB,GAAK,OACrBC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,YAAAkB,OAActB,EAAMuB,MAAQ,SAAW,KAClDvB,EAAMmB,WCEIK,EAJH,SAAAxB,GAAK,OACfC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,MAAAkB,OAAQtB,EAAMuB,MAAQ,SAAW,KAAOvB,EAAMmB,WCO/CM,EARA,SAAAzB,GACb,IAAM0B,EAAO1B,EAAM0B,KAChBC,MAAM,KACNC,IAAI,SAAAF,GAAI,MAAI,OAASA,IACrBG,KAAK,KACR,OAAO5B,EAAAC,EAAAC,cAAA,OAAKC,UAAWsB,GAAO1B,EAAMmB,WCEvBW,0LAJX,OAAO7B,EAAAC,EAAAC,cAAA,sBAFU4B,+BCsGNC,6MApFbC,MAAQ,CACNC,SACAC,aAAc,EACdlB,SAAU,EACVF,WAAY,GACZqB,QAAS,MAGX5B,YAAc,SAAAF,IAC4B,IAApC+B,EAAKJ,MAAMG,QAAQE,QAAQhC,IAC7B+B,EAAKE,kBACLF,EAAKG,SAAS,CAAEJ,QAASC,EAAKJ,MAAMG,QAAQd,OAAOhB,MAEnD+B,EAAKI,iBAITF,gBAAkB,WAChB,IAAMG,EAAWL,EAAKJ,MAAME,aAAe,EAC3CE,EAAKG,SAAS,CACZL,aAAcO,EACd3B,WAAY,KAEV2B,GAAYL,EAAKJ,MAAMhB,SACzBoB,EAAKG,SAAS,CAAEvB,SAAUyB,IACJ,KAAbA,GACTL,EAAKG,SAAS,CAAEzB,WAAY,aAE9BsB,EAAKM,mBAGPF,YAAc,WACZJ,EAAKG,SAAS,CACZL,aAAc,EACdlB,SAAUoB,EAAKJ,MAAMhB,SACrBF,WAAY,WACZqB,QAAS,KAEXC,EAAKM,mBAGPA,cAAgB,WACd,IAAIC,EAnDR,SAAuBC,GACrB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADCM,EAElB,CAACP,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFkCM,EAAA,GAE9BP,EAAMG,GAFwBI,EAAA,GAI3C,OAAOP,EA8CgBQ,CAAcnB,GACnCG,EAAKG,SAAS,CAAEN,OAAQU,6EAGjB,IAAAU,EAAAC,KACP,OACEtD,EAAAC,EAAAC,cAACqD,EAAD,KACEvD,EAAAC,EAAAC,cAACsD,EAAD,CACE3C,MAAM,6BACNE,MAAOuC,KAAKtB,MAAME,aAClBlB,SAAUsC,KAAKtB,MAAMhB,SACrBF,WAAYwC,KAAKtB,MAAMlB,aAGzBd,EAAAC,EAAAC,cAACuD,EAAD,oGAKAzD,EAAAC,EAAAC,cAACwD,EAAD,KACE1D,EAAAC,EAAAC,cAACyD,EAAD,KACGL,KAAKtB,MAAMC,OAAON,IAAI,SAAAhB,GAAK,OAC1BX,EAAAC,EAAAC,cAAC0D,EAAD,CAAQnC,KAAK,aACXzB,EAAAC,EAAAC,cAAC2D,EAAD,CACEC,IAAKnD,EAAMN,GACXE,YAAa8C,EAAK9C,YAClB+B,gBAAiBe,EAAKf,gBACtBE,YAAaa,EAAKb,YAClBE,cAAeW,EAAKX,cACpBrC,GAAIM,EAAMN,GACVM,MAAOA,EAAMA,aAMvBX,EAAAC,EAAAC,cAAC6D,EAAD,cA/EUjC,aCREkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOtE,EAAAC,EAAAC,cAACqE,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8dd18404.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./ImageCard.css\";\n\nconst ImageCard = props => (\n  <div\n    className=\"card\"\n    value={props.id}\n    onClick={() => props.handleClick(props.id)}\n  >\n    <div className=\"img-container\">\n      <img alt={props.name} src={props.image} />\n    </div>\n  </div>\n);\n\nexport default ImageCard;\n","import React from \"react\";\nimport \"./Navbar.css\";\n\nconst Navbar = props => (\n  <nav>\n    <ul>\n      <li>{props.title}</li>\n\n      <li id=\"rw\">{props.rightWrong}</li>\n\n      <li id=\"cur-sco\">Current Score: {props.score}</li>\n\n      <li id=\"top-sco\">Top Score: {props.topScore}</li>\n    </ul>\n  </nav>\n);\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./Title.css\";\n\nconst Title = props => <h1 className=\"title\">{props.children}</h1>;\n\nexport default Title;\n","import React from \"react\";\n\nconst Container = props => (\n  <div className={`container${props.fluid ? \"-fluid\" : \"\"}`}>\n    {props.children}\n  </div>\n);\n\nexport default Container;\n","import React from \"react\";\n\nconst Row = props => (\n  <div className={`row${props.fluid ? \"-fluid\" : \"\"}`}>{props.children}</div>\n);\n\nexport default Row;\n","import React from \"react\";\n\nconst Column = props => {\n  const size = props.size\n    .split(\" \")\n    .map(size => \"col-\" + size)\n    .join(\" \");\n  return <div className={size}>{props.children}</div>;\n};\n\nexport default Column;\n","import React, { Component } from \"react\";\nimport \"./Footer.css\";\n\nclass Footer extends Component {\n  render() {\n    return <footer />;\n  }\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport ImageCard from \"./components/ImageCard/ImageCard\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport Title from \"./components/Title\";\nimport Container from \"./components/Container/Container\";\nimport Row from \"./components/Row/Row\";\nimport Column from \"./components/Column/Column\";\nimport Footer from \"./components/Footer/Footer\";\nimport images from \"./images.json\";\nimport \"./App.css\";\n//this function shuffles the images in an array and throws them on the DOM\nfunction shuffleImages(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nclass App extends Component {\n  state = {\n    images,\n    currentScore: 0,\n    topScore: 0,\n    rightWrong: \"\",\n    clicked: []\n  };\n  //event handler for clicking on an image\n  handleClick = id => {\n    if (this.state.clicked.indexOf(id) === -1) {\n      this.handleIncrement();\n      this.setState({ clicked: this.state.clicked.concat(id) });\n    } else {\n      this.handleReset();\n    }\n  };\n  //increment counter for score keeping\n  handleIncrement = () => {\n    const newScore = this.state.currentScore + 1;\n    this.setState({\n      currentScore: newScore,\n      rightWrong: \"\"\n    });\n    if (newScore >= this.state.topScore) {\n      this.setState({ topScore: newScore });\n    } else if (newScore === 12) {\n      this.setState({ rightWrong: \"You win!\" });\n    }\n    this.handleShuffle();\n  };\n  //resets the game if wrong / currentScore back to zero\n  handleReset = () => {\n    this.setState({\n      currentScore: 0,\n      topScore: this.state.topScore,\n      rightWrong: \"WRONGGG!\",\n      clicked: []\n    });\n    this.handleShuffle();\n  };\n  //shuffles the images on page\n  handleShuffle = () => {\n    let shuffledImages = shuffleImages(images);\n    this.setState({ images: shuffledImages });\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Navbar\n          title=\"Rick And Morty Clicky Game\"\n          score={this.state.currentScore}\n          topScore={this.state.topScore}\n          rightWrong={this.state.rightWrong}\n        />\n\n        <Title>\n          Clicky Game! Click on an image to earn points, but don't click on any\n          image more than once!\n        </Title>\n\n        <Container>\n          <Row>\n            {this.state.images.map(image => (\n              <Column size=\"md-3 sm-6\">\n                <ImageCard\n                  key={image.id}\n                  handleClick={this.handleClick}\n                  handleIncrement={this.handleIncrement}\n                  handleReset={this.handleReset}\n                  handleShuffle={this.handleShuffle}\n                  id={image.id}\n                  image={image.image}\n                />\n              </Column>\n            ))}\n          </Row>\n        </Container>\n        <Footer />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}